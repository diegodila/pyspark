##  1. Como pegar a data atual e concatenar com a palavra 'limao'

##  2. Pegar o timestamp em select

##  3. Pegar na tabela person as modificacoes entre 2014 e hoje

##  4. Pegar somente o ano atual

##  5. Pegar somente o mes atual

##  6. Somar os preços (unit price) de todas as specialofferid distintas da tabela saleorderdetail

##  7. Contar todos os preços da specialofferid distintas da tabela saleorderdetail

##  8. Saber a quantidade de produtos distintos (salesorderdetail)

##  9. Saber o quantidade de nomes distintos da (person)

##  10. Saber a media de preco para os produtos que sao pratas(silver) (Production.Product)

##  11. Selecione o productNumber e o name transforme o productLine em category 'R' = 'Road', 'M' = 'Mountain','T' = 'Touring', 'S' = 'Other sale items' se não 'Not for sale'  (Production.Product)

##  12. Selecione o productNumber e o name e depois pesquise o listPrice e transforme em pricerange quando: listprice = 0 sera 'Mfg item - not for resale' , < 50 'Under 50', >= 50 and < 250 = 'under 250', >= 250 and < 1000 = 'under 1000', senao 'over 1000' (Production.Product)

##  13. Pegar primeiro nao nulo das colunas (Class, Color, ProductNumber) da tabela product e salvar como firstNotNull (Production.Product)

##  14. Na tabela products pegar a primeira ocorrencia da linha qual que não é nulo e replicar para o dados na seguinte ordem de campos Color, ProductNumber (Production.Product)

##  15. Selecione todas as colunas da tabela person que tem o suffix nulo (Person.Person)

##  16. Transforme os dados da tabela person e coluna suffix que são nulos em goiaba *, a coluna transformada deverá chamar énulo (Person.Person)

##  17. Converta os endereços secundários que são nulos em endereços primarios da tabela (person.address) (FAÇA COM COALESCE TAMBEM)

##  18. Quais nomes tem uma ocorrencia maior que 10 vezes, na tabela Person

##  19. Quais sobrenomes tem uma ocorrencia maior que 2 vezes, na tabela Person

##  20. Saber se os nomes Greg, Jeff e Sheena tem uma ocorrencia maior que 10 vezes (Person.Person)

##  21. Quais produtos que no total de vendas estão entre 162k a 500k (Sales.SalesOrderDetail)

##  22. Quais nomes tem uma ocorrencia maior que 10 vezes, porem somente onde o titulo é 'Mr.' (Person.Person)

##  23. Identificar as provincias(stateProvinceID) com o maior numero de cadastros no nosso sistema, é preciso encontrar provincias que estão registradas no banco de dados mais que 1000 vezes (trazer os nomes das provincias tambem) (Person.Address) (Person.StateProvince)
 
##  24. Selecione o TerritoryName, BusinessEntityID, SalesYTD, desloque o salesYTD 1 linha, na janela do territoryName (sales.vSalesPerson)

##  25. Contar os nomes de registros duplicados da tabela Person

##  26. Faça um join do lado esquerdo (dfa) no id
from pyspark.sql.types import StructType, StructField,DateType,IntegerType
import datetime
schema = StructType([StructField("id",IntegerType(),True), StructField("numeros",IntegerType(),True), StructField("data",DateType(),True)])
data_a =  [(1, 101, datetime.datetime.strptime('2022-07-20',"%Y-%m-%d")), (2, 102, datetime.datetime.strptime('2132-11-11',"%Y-%m-%d")), (3, 103, datetime.datetime.strptime('2023-10-23',"%Y-%m-%d")), (3, 103, datetime.datetime.strptime('2023-10-21',"%Y-%m-%d")), (9, 103, datetime.datetime.strptime('2023-10-21',"%Y-%m-%d"))]
data_b = [ (1, 201, datetime.datetime.strptime('20/01/2022', '%d/%m/%Y')),(2, 202, datetime.datetime.strptime('22/10/2032', '%d/%m/%Y')), (3, 203, datetime.datetime.strptime('21/10/2023', '%d/%m/%Y')), (4, 203, datetime.datetime.strptime('21/12/2011', '%d/%m/%Y')), (4, 203, datetime.datetime.strptime('23/11/2011', '%d/%m/%Y')), (5, 203, datetime.datetime.strptime('23/03/2023', '%d/%m/%Y'))]
dfa = spark.createDataFrame(data_a, schema)
dfb = spark.createDataFrame(data_b,schema)

## 27. Qual é a regra do inner join no sql?
ele procura a regra passada linha a linha, onde aquela linha ele vai procurar ocorrencias naquela tabela que está fazendo o join ex: (dfa.id = 1, dfb.id = 1 row1), (dfa.id = 1, dfb.id = 1 row2)

## 28. Retorne todos os dados do carro_a que não existem na carro_b
data_carro_a = [(3,'golf',7777,'55'),(4,'Ex',39399,'23'),(2,'RDX',83948,'1'),(1,'Avalon',34908,54)]
data_carro_b = [(3,'golf',2348934, '55'), (2,'rdx',384374,'1'), (1,"Avalon", 3894348, '54')]
carro_a = spark.createDataFrame(data_carro_a, schema='id int, modelo string, preco int, cod string')
carro_b = spark.createDataFrame(data_carro_b, schema='id int, modelo string, preco int, cod string')
carro_a.join(carro_b, carro_a.id == carro_b.id,"leftanti")